// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WalletComponent.Repositorys.EF;

namespace WalletComponent.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20181008070538_Init01")]
    partial class Init01
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WalletComponent.Domains.FriendNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description");

                    b.Property<Guid>("FromUserId");

                    b.Property<string>("Message");

                    b.Property<int>("State");

                    b.Property<Guid>("ToUserId");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("FriendNotification");
                });

            modelBuilder.Entity("WalletComponent.Domains.Groups", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description");

                    b.Property<string>("GroupName");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("WalletComponent.Domains.UserGroupRelationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FromUserGroupId");

                    b.Property<Guid>("ToUserGroupId");

                    b.Property<Guid?>("UsersId");

                    b.Property<Guid?>("UsersId1");

                    b.HasKey("Id");

                    b.HasIndex("FromUserGroupId");

                    b.HasIndex("ToUserGroupId");

                    b.HasIndex("UsersId");

                    b.HasIndex("UsersId1");

                    b.ToTable("UserGroupRelationship");
                });

            modelBuilder.Entity("WalletComponent.Domains.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description");

                    b.Property<string>("FullName");

                    b.Property<string>("HeadImg");

                    b.Property<string>("IdCard");

                    b.Property<string>("Mobile");

                    b.Property<string>("NickName");

                    b.Property<string>("PassWord");

                    b.Property<bool>("Sex");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UserCode");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WalletComponent.Domains.FriendNotification", b =>
                {
                    b.HasOne("WalletComponent.Domains.Users", "FromUser")
                        .WithMany("FriendNotificationListByFrom")
                        .HasForeignKey("FromUserId");

                    b.HasOne("WalletComponent.Domains.Users", "ToUser")
                        .WithMany("FriendNotificationListByTo")
                        .HasForeignKey("ToUserId");
                });

            modelBuilder.Entity("WalletComponent.Domains.Groups", b =>
                {
                    b.HasOne("WalletComponent.Domains.Users", "User")
                        .WithMany("GroupList")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WalletComponent.Domains.UserGroupRelationship", b =>
                {
                    b.HasOne("WalletComponent.Domains.Groups", "FromUserGroup")
                        .WithMany("UserGroupRelationship")
                        .HasForeignKey("FromUserGroupId");

                    b.HasOne("WalletComponent.Domains.Groups", "ToUserGroup")
                        .WithMany()
                        .HasForeignKey("ToUserGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WalletComponent.Domains.Users")
                        .WithMany("UserGroupRelationshipListByFrom")
                        .HasForeignKey("UsersId");

                    b.HasOne("WalletComponent.Domains.Users")
                        .WithMany("UserGroupRelationshipListByTo")
                        .HasForeignKey("UsersId1");
                });
#pragma warning restore 612, 618
        }
    }
}
